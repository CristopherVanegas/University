
Est. Cristopher Vanegas

--- Ejemplo 1 ---------------------------------------------------------------
> DATOS
 db.orders.insertMany( [
{ _id: 0, name: "Pepperoni", size: "small", price: 19,
quantity: 10, date: ISODate( "2021-03-13T08:14:30Z" ) },
{ _id: 1, name: "Pepperoni", size: "medium", price: 20,
quantity: 20, date : ISODate( "2021-03-13T09:13:24Z" ) },
{ _id: 2, name: "Pepperoni", size: "large", price: 21,
quantity: 30, date : ISODate( "2021-03-17T09:22:12Z" ) },
{ _id: 3, name: "Cheese", size: "small", price: 12,
quantity: 15, date : ISODate( "2021-03-13T11:21:39.736Z" ) },
{ _id: 4, name: "Cheese", size: "medium", price: 13,
quantity:50, date : ISODate( "2022-01-12T21:23:13.331Z" ) },
{ _id: 5, name: "Cheese", size: "large", price: 14,
quantity: 10, date : ISODate( "2022-01-12T05:08:13Z" ) },
{ _id: 6, name: "Vegan", size: "small", price: 17,
quantity: 10, date : ISODate( "2021-01-13T05:08:13Z" ) },
{ _id: 7, name: "Vegan", size: "medium", price: 18,
quantity: 10, date : ISODate( "2021-01-13T05:10:13Z" ) }
] );

Tuberias y Transformaciones
db.orders.aggregate([
	{$match: { size: 'medium'}},
	{$group: { _id: "$name"}, totalQuantity: { $sum: "$quantity"}}
])

Ejemplo 1
db.orders.aggregate( [
   {
      $match: { size: 'medium' }
   },
   {
      $group: { _id: "$name", totalQuantity: { $sum: "$quantity" } }
   }
] )


--- Ejemplo 2 ---------------------------------------------------------------
> DATOS
db.createCollection("usuarios");

db.usuarios.insertMany([
{
nombre: "Diego",
email: "diego@example.com",
edad: 27
},
{
nombre: "Franco",
email: "franco@example.com",
edad: 20
},
{
nombre: "Juan",
email: "juan@example.com",
edad: 40
}
]); 


> OPERACION
db.usuarios.aggregate([
	{$match: {edad: 40}}
])


> SORT
// Orden ascendente
db.usuarios.aggregate([
	{$sort: {edad: 1}}
])

// Orden descendente
db.usuarios.aggregate([
	{$sort: {edad: -1}}
])


> SELECCION ESPECIFICA DE CAMPOS
 0 -> Para excluir
 1 -> Para incluir

// Incluyendo edad y nombre
db.usuarios.aggregate([
	{
		$project: {edad: 1, nombre: 1}
	}
])

// Excluyendo edad
db.usuarios.aggregate([
	{
		$project: {nombre: 1}
	}
])


> AVERAGE
db.usuarios.aggregate([{
	$group: {
		_id: null,
		promedioEdad: { $avg: "$edad"}
	}
}])


--- TRABAJO GRUPAL ----------------------------------------------------------
> DATOS
 db.orders.insertMany( [
{ _id: 0, name: "Pepperoni", size: "small", price: 19,
quantity: 10, date: ISODate( "2021-03-13T08:14:30Z" ) },
{ _id: 1, name: "Pepperoni", size: "medium", price: 20,
quantity: 20, date : ISODate( "2021-03-13T09:13:24Z" ) },
{ _id: 2, name: "Pepperoni", size: "large", price: 21,
quantity: 30, date : ISODate( "2021-03-17T09:22:12Z" ) },
{ _id: 3, name: "Cheese", size: "small", price: 12,
quantity: 15, date : ISODate( "2021-03-13T11:21:39.736Z" ) },
{ _id: 4, name: "Cheese", size: "medium", price: 13,
quantity:50, date : ISODate( "2022-01-12T21:23:13.331Z" ) },
{ _id: 5, name: "Cheese", size: "large", price: 14,
quantity: 10, date : ISODate( "2022-01-12T05:08:13Z" ) },
{ _id: 6, name: "Vegan", size: "small", price: 17,
quantity: 10, date : ISODate( "2021-01-13T05:08:13Z" ) },
{ _id: 7, name: "Vegan", size: "medium", price: 18,
quantity: 10, date : ISODate( "2021-01-13T05:10:13Z" ) }
] );

> En la colección orders, 
  calcular para las ordenes de size= medium, 
  obtener el máximo valor de quantity agrupada por name

db.orders.aggregate([
	{$match: { size: "medium"}}, 
	{$group: { _id: "$name", total: { $max: "$quantity"}}}
])

db.orders.aggregate( [
   {
      $match: { size: "medium" }
   },
   {
      $group: { _id: "$name", cantidadMaxima: { $max: "$quantity" } }
   }
] )


{$match: { size: 'medium'}},



















